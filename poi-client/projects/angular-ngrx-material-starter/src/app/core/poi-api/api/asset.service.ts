/**
 * Swagger POI
 * POI
 *
 * OpenAPI spec version: 1.0.0-SNAPSHOT
 * Contact: henmerlin@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs/Observable';

import { Asset } from '../model/asset';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AssetService {

    protected basePath = 'http://localhost:8080';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a new Asset
     * 
     * @param body Asset object that needs to be added to the API
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addAsset(body: Asset, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public addAsset(body: Asset, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public addAsset(body: Asset, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public addAsset(body: Asset, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addAsset.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.post<any>(`${this.basePath}/asset`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Deletes a Asset
     * 
     * @param assetId Asset id to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteAsset(assetId: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteAsset(assetId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteAsset(assetId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteAsset(assetId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (assetId === null || assetId === undefined) {
            throw new Error('Required parameter assetId was null or undefined when calling deleteAsset.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.delete<any>(`${this.basePath}/asset/${encodeURIComponent(String(assetId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find All Assets
     * Returns a all Assets
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findAllAssets(observe?: 'body', reportProgress?: boolean): Observable<Array<Asset>>;
    public findAllAssets(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Asset>>>;
    public findAllAssets(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Asset>>>;
    public findAllAssets(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Asset>>(`${this.basePath}/asset`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Asset by Filter
     * Returns Asset and POI Events
     * @param assetKey Key of Asset
     * @param initialDate Initial POI Event Date
     * @param finalDate Final POI Event Date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssetByFilter(assetKey?: string, initialDate?: number, finalDate?: number, observe?: 'body', reportProgress?: boolean): Observable<Array<Asset>>;
    public getAssetByFilter(assetKey?: string, initialDate?: number, finalDate?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Asset>>>;
    public getAssetByFilter(assetKey?: string, initialDate?: number, finalDate?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Asset>>>;
    public getAssetByFilter(assetKey?: string, initialDate?: number, finalDate?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (assetKey !== undefined && assetKey !== null) {
            queryParameters = queryParameters.set('assetKey', <any>assetKey);
        }
        if (initialDate !== undefined && initialDate !== null) {
            queryParameters = queryParameters.set('initialDate', <any>initialDate);
        }
        if (finalDate !== undefined && finalDate !== null) {
            queryParameters = queryParameters.set('finalDate', <any>finalDate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Array<Asset>>(`${this.basePath}/asset/filter`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Find Asset by ID
     * Returns a single Asset
     * @param assetId ID of Asset to return
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssetById(assetId: number, observe?: 'body', reportProgress?: boolean): Observable<Asset>;
    public getAssetById(assetId: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Asset>>;
    public getAssetById(assetId: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Asset>>;
    public getAssetById(assetId: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (assetId === null || assetId === undefined) {
            throw new Error('Required parameter assetId was null or undefined when calling getAssetById.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.get<Asset>(`${this.basePath}/asset/${encodeURIComponent(String(assetId))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing Asset
     * 
     * @param body Asset object that needs to be added
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateAsset(body: Asset, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateAsset(body: Asset, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateAsset(body: Asset, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateAsset(body: Asset, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling updateAsset.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.put<any>(`${this.basePath}/asset`,
            body,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
